import numpy as np
import warnings
from typing import List

warnings.filterwarnings("ignore")

# Определение универсума дискурса для окружающего освещения, изменения скорости и контрольного значения
x_ambientLight = np.arange(120, 230, 1)
x_ratechange = np.arange(-10, 10, 1)
x_controlvalue = np.arange(0, 10, 1)

def trapmf(x: float, params: List[float]) -> float:
    '''
    Трапециевидная функция принадлежности 

    Параметры:
    - x: Значение входа
    - params: Список параметров [a, b, c, d], определяющих трапециевидную форму

    Возвращает:
    - Нечеткое значение принадлежности, вычисленное с использованием трапециевидной функции принадлежности - f(x;a,b,c,d) = max(min((x-a/b-a),1,(d-x/d-c)),0)
    '''

    a, b, c, d = params
    return max(min(((x - a) / (b - a)), 1, ((d - x) / (d - c))), 0)

def trimf(x: float, params: List[float]) -> float:

    '''
    Треугольная функция принадлежности

    Параметры:
    - x: Значение входа
    - params: Список параметров [a, b, c], определяющих треугольную форму

    Возвращает:
    - Нечеткое значение принадлежности, вычисленное с использованием треугольной функции принадлежности f(x;a,b,c) = max(min((x-a / b-a), (c-x / c-b)),0)
    '''
    
    a, b, c = params
    return max(min(((x - a) / (b - a)), ((c - x) / (c - b))), 0)

'''x1 Memberships'''
# темный L(130,150)
def fuzzify_x1_dark(x1: float) -> float:
    '''
    Фаззификация x1 для темного окружающего света

    Параметры:
    - x1: Значение окружающего света

    Возвращает:
    - Нечеткое значение принадлежности для темного окружающего света
    '''
    return trapmf(x1, [-1, 0, 130, 150])

# Средний Π(130,150,190,210)
def fuzzify_x1_medium(x1: float) -> float:
    '''
    Фаззификация x1 для среднего окружающего света

    Параметры:
    - x1: Значение окружающего света

    Возвращает:
    - Нечеткое значение принадлежности для среднего окружающего света
    '''
    return trapmf(x1, [130, 150, 190, 210])

# Свет Г(190,210)
def fuzzify_x1_light(x1: float) -> float:
    '''
    Фаззификация x1 для светлого окружающего света

    Параметры:
    - x1: Значение окружающего света

    Возвращает:
    - Нечеткое значение принадлежности для светлого окружающего света
    '''
    return trapmf(x1, [190, 210, 0,-1])

'''x2 Memberships'''

# Отрицательный- Маленький  Λ(-20,-10,0)
def fuzzify_x2_NS(x2: float) -> float:
    '''
    Фаззификация x2 для положительного-малого изменения скорости

    Параметры:
    - x2: Значение изменения скорости

    Возвращает:
    - Нечеткое значение принадлежности для положительного-малого изменения скорости
    '''
    return trimf(x2, [-20, -10, 0])

# Ноль Λ(-10,0,10)
def fuzzify_x2_ZE(x2: float) -> float:
    '''
    Фаззификация x2 для нулевого изменения скорости

    Параметры:
    - x2: Значение изменения скорости

    Возвращает:
    - Нечеткое значение принадлежности для нулевого изменения скорости
    '''
    return trimf(x2, [-10, 0, 10])

# Положительный- Маленький  Λ(0,10,20) 
def fuzzify_x2_PS(x2: float) -> float:
    '''
    Фаззификация x2 для отрицательного-малого изменения скорости

    Параметры:
    - x2: Значение изменения скорости

    Возвращает:
    - Нечеткое значение принадлежности для отрицательного-малого изменения скорости
    '''
    return trimf(x2, [0, 10, 20])

# Output: DM Membership Functions
# Очень маленький VS Λ(2,4,6),
def fuzzify_output_very_small(VS: float) -> float:
    '''
    Фаззификация выхода для очень маленького значения управляющей величины

    Параметры:
    - VS: Значение управляющей величины

    Возвращает:
    - Нечеткое значение принадлежности для очень маленького значения управляющей величины
    '''
    # return trimf(VS, [2, 3, 4])
    return trapmf(VS, [-1, 0, 2, 4])

# Маленький  Λ(2,4,6)
def fuzzify_output_small(S: float) -> float:
    '''
    Фаззификация выхода для маленького значения управляющей величины

    Параметры:
    - S: Значение управляющей величины

    Возвращает:
    - Нечеткое значение принадлежности для маленького значения управляющей величины
    '''
    return trimf(S, [2, 4, 6])

# Big Большой Λ(4,6,8) 
def fuzzify_output_big(B: float) -> float:
    '''
    Фаззификация выхода для большого значения управляющей величины

    Параметры:
    - B: Значение управляющей величины

    Возвращает:
    - Нечеткое значение принадлежности для большого значения управляющей величины
    '''
    return trimf(B, [4, 6, 8])

# Очень-Большой  Λ(6,8)
def fuzzify_output_verry_big(VB: float) -> float:
    '''
    Фаззификация выхода для очень большого значения управляющей величины

    Параметры:
    - VB: Значение управляющей величины

    Возвращает:
    - Нечеткое значение принадлежности для очень большого значения управляющей величины
    '''
    return trapmf(VB, [6, 8, 0, -1])